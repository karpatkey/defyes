from typing import Dict

from defabipedia import Chain
from defabipedia.centrifuge import EthereumContractSpecs
from web3 import Web3

from defyes.functions import balance_of, ensure_a_block_number, get_decimals
from defyes.protocols.centrifuge.autogenerated import LiquidityPool, PoolManager

PoolManager.default_addresses = {Chain.ETHEREUM: EthereumContractSpecs.PoolManager.address}


def get_protocol_data_for(
    blockchain: str,
    wallet: str,
    position_identifier: str,
    block: str = "latest",
    decimals: bool = True,
) -> Dict:
    """Get the data for the Centrifuge protocol.
    Args:
        position_identifier (str): The address of the liquidity pool you want to get data from.
    """
    block = ensure_a_block_number(block, blockchain)
    wallet = Web3.to_checksum_address(wallet)
    position_identifier = Web3.to_checksum_address(position_identifier)

    liquidity_pool = LiquidityPool(blockchain, block, position_identifier)
    tranche_id = liquidity_pool.tranche_id
    pool_id = liquidity_pool.pool_id
    pool_manager = PoolManager(blockchain, block)

    tranche_token = pool_manager.get_tranche_token(pool_id, tranche_id)

    holding_balance = balance_of(wallet, tranche_token, block, blockchain, decimals=False)

    token_balance = liquidity_pool.convert_to_assets(int(holding_balance))
    token_address = liquidity_pool.asset

    if decimals:
        token_balance = token_balance / 10 ** get_decimals(token_address, blockchain)
        holding_balance = holding_balance / 10 ** get_decimals(tranche_token, blockchain)

    holdings = {"address": tranche_token, "balance": holding_balance}
    underlying = {"address": token_address, "balance": token_balance}

    data = {
        "blockchain": blockchain,
        "block": block,
        "protocol": "Centrifuge",
        "positions_key": "lp_token",
        "version": 0,
        "wallet": wallet,
        "decimals": "",
        "positions": {position_identifier: {"holdings": holdings, "underlying": underlying}},
    }

    return data
