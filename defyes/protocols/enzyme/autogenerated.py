"""
Autogenerated module. Don't change it manualy. Instead, import its classes into __init__.py or even derive them adding
extra methds.

# Inside __init__.py

from .autogenerated import DivaStethVault

# Optionally
class DivaStethVault(DivaStethVault):
    ...
"""

from karpatkit.node import get_node
from web3 import Web3

from defyes.generator import load_abi


class DivaStethVault:
    default_addresses: dict[str, str]

    def __init__(self, blockchain: str, block: int, address: str | None = None) -> None:
        self.block = block
        self.blockchain = blockchain
        if address:
            self.address = Web3.to_checksum_address(address)
        else:
            try:
                self.address = self.default_addresses[blockchain]
            except AttributeError as e:
                raise ValueError("No default_addresses defined when trying to guess the address.") from e
            except KeyError as e:
                raise ValueError(
                    f"{blockchain!r} not defined in default_addresses when trying to guess the address."
                ) from e
        node = get_node(blockchain)
        self.contract = node.eth.contract(address=self.address, abi=load_abi(__file__, "diva_steth_vault.json"))

    def allowance(self, _owner: str, _spender: str) -> int:
        return self.contract.functions.allowance(_owner, _spender).call(block_identifier=self.block)

    def balance_of(self, _account: str) -> int:
        return self.contract.functions.balanceOf(_account).call(block_identifier=self.block)

    def can_manage_assets(self, _who: str) -> bool:
        """
        Output: canManageAssets_
        """
        return self.contract.functions.canManageAssets(_who).call(block_identifier=self.block)

    def can_migrate(self, _who: str) -> bool:
        """
        Output: canMigrate_
        """
        return self.contract.functions.canMigrate(_who).call(block_identifier=self.block)

    def can_relay_calls(self, _who: str) -> bool:
        """
        Output: canRelayCalls_
        """
        return self.contract.functions.canRelayCalls(_who).call(block_identifier=self.block)

    @property
    def decimals(self) -> int:
        return self.contract.functions.decimals().call(block_identifier=self.block)

    @property
    def get_accessor(self) -> str:
        """
        Output: accessor_
        """
        return self.contract.functions.getAccessor().call(block_identifier=self.block)

    @property
    def get_active_external_positions(self) -> list[str]:
        """
        Output: activeExternalPositions_
        """
        return self.contract.functions.getActiveExternalPositions().call(block_identifier=self.block)

    @property
    def get_creator(self) -> str:
        """
        Output: creator_
        """
        return self.contract.functions.getCreator().call(block_identifier=self.block)

    def get_external_position_lib_for_type(self, _type_id: int) -> str:
        """
        Output: externalPositionLib_
        """
        return self.contract.functions.getExternalPositionLibForType(_type_id).call(block_identifier=self.block)

    @property
    def get_external_position_manager(self) -> str:
        """
        Output: externalPositionManager_
        """
        return self.contract.functions.getExternalPositionManager().call(block_identifier=self.block)

    @property
    def get_fund_deployer(self) -> str:
        """
        Output: fundDeployer_
        """
        return self.contract.functions.getFundDeployer().call(block_identifier=self.block)

    @property
    def get_gas_relay_paymaster_factory(self) -> str:
        """
        Output: gasRelayPaymasterFactory_
        """
        return self.contract.functions.getGasRelayPaymasterFactory().call(block_identifier=self.block)

    @property
    def get_gas_relay_trusted_forwarder(self) -> str:
        """
        Output: trustedForwarder_
        """
        return self.contract.functions.getGasRelayTrustedForwarder().call(block_identifier=self.block)

    @property
    def get_migrator(self) -> str:
        """
        Output: migrator_
        """
        return self.contract.functions.getMigrator().call(block_identifier=self.block)

    @property
    def get_mln_burner(self) -> str:
        """
        Output: mlnBurner_
        """
        return self.contract.functions.getMlnBurner().call(block_identifier=self.block)

    @property
    def get_mln_token(self) -> str:
        """
        Output: mlnToken_
        """
        return self.contract.functions.getMlnToken().call(block_identifier=self.block)

    @property
    def get_nominated_owner(self) -> str:
        """
        Output: nominatedOwner_
        """
        return self.contract.functions.getNominatedOwner().call(block_identifier=self.block)

    @property
    def get_owner(self) -> str:
        """
        Output: owner_
        """
        return self.contract.functions.getOwner().call(block_identifier=self.block)

    @property
    def get_positions_limit(self) -> int:
        """
        Output: positionsLimit_
        """
        return self.contract.functions.getPositionsLimit().call(block_identifier=self.block)

    @property
    def get_protocol_fee_reserve(self) -> str:
        """
        Output: protocolFeeReserve_
        """
        return self.contract.functions.getProtocolFeeReserve().call(block_identifier=self.block)

    @property
    def get_protocol_fee_tracker(self) -> str:
        """
        Output: protocolFeeTracker_
        """
        return self.contract.functions.getProtocolFeeTracker().call(block_identifier=self.block)

    @property
    def get_tracked_assets(self) -> list[str]:
        """
        Output: trackedAssets_
        """
        return self.contract.functions.getTrackedAssets().call(block_identifier=self.block)

    @property
    def get_vault_lib(self) -> str:
        """
        Output: vaultLib_
        """
        return self.contract.functions.getVaultLib().call(block_identifier=self.block)

    @property
    def get_weth_token(self) -> str:
        """
        Output: wethToken_
        """
        return self.contract.functions.getWethToken().call(block_identifier=self.block)

    def is_active_external_position(self, _external_position: str) -> bool:
        """
        Output: isActiveExternalPosition_
        """
        return self.contract.functions.isActiveExternalPosition(_external_position).call(block_identifier=self.block)

    def is_asset_manager(self, _who: str) -> bool:
        """
        Output: isAssetManager_
        """
        return self.contract.functions.isAssetManager(_who).call(block_identifier=self.block)

    def is_tracked_asset(self, _asset: str) -> bool:
        """
        Output: isTrackedAsset_
        """
        return self.contract.functions.isTrackedAsset(_asset).call(block_identifier=self.block)

    @property
    def name(self) -> str:
        return self.contract.functions.name().call(block_identifier=self.block)

    @property
    def proxiable_uuid(self) -> bytes:
        """
        Output: uuid_
        """
        return self.contract.functions.proxiableUUID().call(block_identifier=self.block)

    @property
    def shares_are_freely_transferable(self) -> bool:
        """
        Output: sharesAreFreelyTransferable_
        """
        return self.contract.functions.sharesAreFreelyTransferable().call(block_identifier=self.block)

    @property
    def symbol(self) -> str:
        """
        Output: symbol_
        """
        return self.contract.functions.symbol().call(block_identifier=self.block)

    @property
    def total_supply(self) -> int:
        return self.contract.functions.totalSupply().call(block_identifier=self.block)
