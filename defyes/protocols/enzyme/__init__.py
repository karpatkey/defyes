from decimal import Decimal

from defabipedia import Chain
from defabipedia.tokens import EthereumTokenAddr
from web3 import Web3

from defyes.functions import balance_of, ensure_a_block_number
from defyes.protocols.enzyme.autogenerated import DivaStethVault

DivaStethVault.default_addresses = {Chain.ETHEREUM: "0x1ce8aAfb51e79F6BDc0EF2eBd6fD34b00620f6dB"}


def get_protocol_data_for(
    blockchain: str,
    wallet: str,
    position_identifier: str,
    block: int | str = "latest",
    decimals: bool = True,
) -> dict:
    """
    Currently only DIVA StETH vault on ethereum is supported.

    Args:
        position_identifier (str): Address of the Enzyme vault.
    """
    block = ensure_a_block_number(block, blockchain)
    wallet = Web3.to_checksum_address(wallet)
    if position_identifier is not None:
        position_identifier = Web3.to_checksum_address(position_identifier)

    diva_steth_vault = DivaStethVault(blockchain, block, position_identifier)

    shares = diva_steth_vault.balance_of(wallet)
    percentage_owned = shares / diva_steth_vault.total_supply
    steth_amount = balance_of(
        diva_steth_vault.address, EthereumTokenAddr.stETH, block, blockchain, decimals=decimals
    ) * Decimal(percentage_owned)

    if decimals:
        shares = shares / 10**diva_steth_vault.decimals

    data_dict = {
        "blockchain": blockchain,
        "block": block,
        "protocol": "Enzyme",
        "positions_key": "vault_address",
        "version": 0,
        "wallet": wallet,
        "decimals": "",
        "positions": {
            position_identifier: {
                "underlyings": [{"address": EthereumTokenAddr.stETH, "balance": steth_amount}],
                "holdings": [{"address": position_identifier, "balance": shares}],
            },
        },
    }

    return data_dict
