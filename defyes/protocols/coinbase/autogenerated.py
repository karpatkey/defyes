"""
Autogenerated module. Don't change it manualy. Instead, import its classes into __init__.py or even derive them adding
extra methds.

# Inside __init__.py

from .autogenerated import StakedToken

# Optionally
class StakedToken(StakedToken):
    ...
"""

from karpatkit.node import get_node
from web3 import Web3

from defyes.generator import load_abi


class StakedToken:
    default_addresses: dict[str, str]

    def __init__(self, blockchain: str, block: int, address: str | None = None) -> None:
        self.block = block
        self.blockchain = blockchain
        if address:
            self.address = Web3.to_checksum_address(address)
        else:
            try:
                self.address = self.default_addresses[blockchain]
            except AttributeError as e:
                raise ValueError("No default_addresses defined when trying to guess the address.") from e
            except KeyError as e:
                raise ValueError(
                    f"{blockchain!r} not defined in default_addresses when trying to guess the address."
                ) from e
        node = get_node(blockchain)
        self.contract = node.eth.contract(address=self.address, abi=load_abi(__file__, "staked_token.json"))

    @property
    def cancel_authorization_typehash(self) -> bytes:
        return self.contract.functions.CANCEL_AUTHORIZATION_TYPEHASH().call(block_identifier=self.block)

    @property
    def domain_separator(self) -> bytes:
        return self.contract.functions.DOMAIN_SEPARATOR().call(block_identifier=self.block)

    @property
    def permit_typehash(self) -> bytes:
        return self.contract.functions.PERMIT_TYPEHASH().call(block_identifier=self.block)

    @property
    def receive_with_authorization_typehash(self) -> bytes:
        return self.contract.functions.RECEIVE_WITH_AUTHORIZATION_TYPEHASH().call(block_identifier=self.block)

    @property
    def transfer_with_authorization_typehash(self) -> bytes:
        return self.contract.functions.TRANSFER_WITH_AUTHORIZATION_TYPEHASH().call(block_identifier=self.block)

    def allowance(self, owner: str, spender: str) -> int:
        return self.contract.functions.allowance(owner, spender).call(block_identifier=self.block)

    def authorization_state(self, authorizer: str, nonce: bytes) -> bool:
        return self.contract.functions.authorizationState(authorizer, nonce).call(block_identifier=self.block)

    def balance_of(self, account: str) -> int:
        return self.contract.functions.balanceOf(account).call(block_identifier=self.block)

    @property
    def blacklister(self) -> str:
        return self.contract.functions.blacklister().call(block_identifier=self.block)

    @property
    def currency(self) -> str:
        return self.contract.functions.currency().call(block_identifier=self.block)

    @property
    def decimals(self) -> int:
        return self.contract.functions.decimals().call(block_identifier=self.block)

    @property
    def exchange_rate(self) -> int:
        """
        Output: _exchangeRate
        """
        return self.contract.functions.exchangeRate().call(block_identifier=self.block)

    def is_blacklisted(self, _account: str) -> bool:
        return self.contract.functions.isBlacklisted(_account).call(block_identifier=self.block)

    def is_minter(self, account: str) -> bool:
        return self.contract.functions.isMinter(account).call(block_identifier=self.block)

    @property
    def master_minter(self) -> str:
        return self.contract.functions.masterMinter().call(block_identifier=self.block)

    def minter_allowance(self, minter: str) -> int:
        return self.contract.functions.minterAllowance(minter).call(block_identifier=self.block)

    @property
    def name(self) -> str:
        return self.contract.functions.name().call(block_identifier=self.block)

    def nonces(self, owner: str) -> int:
        return self.contract.functions.nonces(owner).call(block_identifier=self.block)

    @property
    def oracle(self) -> str:
        """
        Output: _oracle
        """
        return self.contract.functions.oracle().call(block_identifier=self.block)

    @property
    def owner(self) -> str:
        return self.contract.functions.owner().call(block_identifier=self.block)

    @property
    def paused(self) -> bool:
        return self.contract.functions.paused().call(block_identifier=self.block)

    @property
    def pauser(self) -> str:
        return self.contract.functions.pauser().call(block_identifier=self.block)

    @property
    def rescuer(self) -> str:
        return self.contract.functions.rescuer().call(block_identifier=self.block)

    @property
    def symbol(self) -> str:
        return self.contract.functions.symbol().call(block_identifier=self.block)

    @property
    def total_supply(self) -> int:
        return self.contract.functions.totalSupply().call(block_identifier=self.block)

    @property
    def version(self) -> str:
        return self.contract.functions.version().call(block_identifier=self.block)
