"""
Autogenerated module. Don't change it manualy. Instead, import its classes into __init__.py or even derive them adding
extra methds.

# Inside __init__.py

from .autogenerated import DarbIsolation, DolomiteMargin

# Optionally
class DarbIsolation(DarbIsolation):
    ...
"""

from karpatkit.node import get_node
from web3 import Web3

from defyes.generator import load_abi


class DarbIsolation:
    default_addresses: dict[str, str]

    def __init__(self, blockchain: str, block: int, address: str | None = None) -> None:
        self.block = block
        self.blockchain = blockchain
        if address:
            self.address = Web3.to_checksum_address(address)
        else:
            try:
                self.address = self.default_addresses[blockchain]
            except AttributeError as e:
                raise ValueError("No default_addresses defined when trying to guess the address.") from e
            except KeyError as e:
                raise ValueError(
                    f"{blockchain!r} not defined in default_addresses when trying to guess the address."
                ) from e
        node = get_node(blockchain)
        self.contract = node.eth.contract(address=self.address, abi=load_abi(__file__, "dARB_isolation.json"))

    @property
    def borrow_position_proxy(self) -> str:
        return self.contract.functions.BORROW_POSITION_PROXY().call(block_identifier=self.block)

    @property
    def dolomite_margin(self) -> str:
        return self.contract.functions.DOLOMITE_MARGIN().call(block_identifier=self.block)

    @property
    def underlying_token(self) -> str:
        return self.contract.functions.UNDERLYING_TOKEN().call(block_identifier=self.block)

    @property
    def allowable_collateral_market_ids(self) -> list[int]:
        return self.contract.functions.allowableCollateralMarketIds().call(block_identifier=self.block)

    @property
    def allowable_debt_market_ids(self) -> list[int]:
        return self.contract.functions.allowableDebtMarketIds().call(block_identifier=self.block)

    def allowance(self, owner: str, spender: str) -> int:
        return self.contract.functions.allowance(owner, spender).call(block_identifier=self.block)

    @property
    def arb_registry(self) -> str:
        return self.contract.functions.arbRegistry().call(block_identifier=self.block)

    def balance_of(self, account: str) -> int:
        return self.contract.functions.balanceOf(account).call(block_identifier=self.block)

    def calculate_vault_by_account(self, _account: str) -> str:
        """
        Output: _vault
        """
        return self.contract.functions.calculateVaultByAccount(_account).call(block_identifier=self.block)

    @property
    def decimals(self) -> int:
        return self.contract.functions.decimals().call(block_identifier=self.block)

    def get_account_by_vault(self, _vault: str) -> str:
        """
        Output: _account
        """
        return self.contract.functions.getAccountByVault(_vault).call(block_identifier=self.block)

    @property
    def get_proxy_vault_init_code_hash(self) -> bytes:
        return self.contract.functions.getProxyVaultInitCodeHash().call(block_identifier=self.block)

    def get_queued_transfer_by_cursor(self, _transfer_cursor: int) -> tuple:
        return self.contract.functions.getQueuedTransferByCursor(_transfer_cursor).call(block_identifier=self.block)

    def get_vault_by_account(self, _account: str) -> str:
        """
        Output: _vault
        """
        return self.contract.functions.getVaultByAccount(_account).call(block_identifier=self.block)

    @property
    def is_initialized(self) -> bool:
        return self.contract.functions.isInitialized().call(block_identifier=self.block)

    @property
    def is_isolation_asset(self) -> bool:
        return self.contract.functions.isIsolationAsset().call(block_identifier=self.block)

    def is_token_converter_trusted(self, _token_converter: str) -> bool:
        return self.contract.functions.isTokenConverterTrusted(_token_converter).call(block_identifier=self.block)

    @property
    def market_id(self) -> int:
        return self.contract.functions.marketId().call(block_identifier=self.block)

    @property
    def name(self) -> str:
        return self.contract.functions.name().call(block_identifier=self.block)

    @property
    def symbol(self) -> str:
        return self.contract.functions.symbol().call(block_identifier=self.block)

    @property
    def total_supply(self) -> int:
        return self.contract.functions.totalSupply().call(block_identifier=self.block)

    @property
    def transfer_cursor(self) -> int:
        return self.contract.functions.transferCursor().call(block_identifier=self.block)

    @property
    def user_vault_implementation(self) -> str:
        return self.contract.functions.userVaultImplementation().call(block_identifier=self.block)


class DolomiteMargin:
    default_addresses: dict[str, str]

    def __init__(self, blockchain: str, block: int, address: str | None = None) -> None:
        self.block = block
        self.blockchain = blockchain
        if address:
            self.address = Web3.to_checksum_address(address)
        else:
            try:
                self.address = self.default_addresses[blockchain]
            except AttributeError as e:
                raise ValueError("No default_addresses defined when trying to guess the address.") from e
            except KeyError as e:
                raise ValueError(
                    f"{blockchain!r} not defined in default_addresses when trying to guess the address."
                ) from e
        node = get_node(blockchain)
        self.contract = node.eth.contract(address=self.address, abi=load_abi(__file__, "dolomite_margin.json"))

    def get_account_balances(self, account: tuple) -> tuple[list[int], list[str], list[tuple], list[tuple]]:
        return self.contract.functions.getAccountBalances(account).call(block_identifier=self.block)

    def get_account_market_with_balance_at_index(self, account: tuple, index: int) -> int:
        return self.contract.functions.getAccountMarketWithBalanceAtIndex(account, index).call(
            block_identifier=self.block
        )

    def get_account_markets_with_balances(self, account: tuple) -> list[int]:
        return self.contract.functions.getAccountMarketsWithBalances(account).call(block_identifier=self.block)

    @property
    def get_account_max_number_of_markets_with_balances(self) -> int:
        return self.contract.functions.getAccountMaxNumberOfMarketsWithBalances().call(block_identifier=self.block)

    def get_account_number_of_markets_with_balances(self, account: tuple) -> int:
        return self.contract.functions.getAccountNumberOfMarketsWithBalances(account).call(block_identifier=self.block)

    def get_account_number_of_markets_with_debt(self, account: tuple) -> int:
        return self.contract.functions.getAccountNumberOfMarketsWithDebt(account).call(block_identifier=self.block)

    def get_account_par(self, account: tuple, market_id: int) -> tuple:
        return self.contract.functions.getAccountPar(account, market_id).call(block_identifier=self.block)

    def get_account_par_no_market_check(self, account: tuple, market_id: int) -> tuple:
        return self.contract.functions.getAccountParNoMarketCheck(account, market_id).call(block_identifier=self.block)

    def get_account_status(self, account: tuple) -> int:
        return self.contract.functions.getAccountStatus(account).call(block_identifier=self.block)

    def get_account_values(self, account: tuple) -> tuple[tuple, tuple]:
        return self.contract.functions.getAccountValues(account).call(block_identifier=self.block)

    def get_account_wei(self, account: tuple, market_id: int) -> tuple:
        return self.contract.functions.getAccountWei(account, market_id).call(block_identifier=self.block)

    def get_adjusted_account_values(self, account: tuple) -> tuple[tuple, tuple]:
        return self.contract.functions.getAdjustedAccountValues(account).call(block_identifier=self.block)

    @property
    def get_earnings_rate(self) -> tuple:
        return self.contract.functions.getEarningsRate().call(block_identifier=self.block)

    def get_is_auto_trader_special(self, auto_trader: str) -> bool:
        return self.contract.functions.getIsAutoTraderSpecial(auto_trader).call(block_identifier=self.block)

    def get_is_global_operator(self, operator: str) -> bool:
        return self.contract.functions.getIsGlobalOperator(operator).call(block_identifier=self.block)

    def get_is_local_operator(self, owner: str, operator: str) -> bool:
        return self.contract.functions.getIsLocalOperator(owner, operator).call(block_identifier=self.block)

    @property
    def get_liquidation_spread(self) -> tuple:
        return self.contract.functions.getLiquidationSpread().call(block_identifier=self.block)

    def get_liquidation_spread_for_pair(self, held_market_id: int, owed_market_id: int) -> tuple:
        return self.contract.functions.getLiquidationSpreadForPair(held_market_id, owed_market_id).call(
            block_identifier=self.block
        )

    @property
    def get_margin_ratio(self) -> tuple:
        return self.contract.functions.getMarginRatio().call(block_identifier=self.block)

    def get_market(self, market_id: int) -> tuple:
        return self.contract.functions.getMarket(market_id).call(block_identifier=self.block)

    def get_market_cached_index(self, market_id: int) -> tuple:
        return self.contract.functions.getMarketCachedIndex(market_id).call(block_identifier=self.block)

    def get_market_current_index(self, market_id: int) -> tuple:
        return self.contract.functions.getMarketCurrentIndex(market_id).call(block_identifier=self.block)

    def get_market_id_by_token_address(self, token: str) -> int:
        return self.contract.functions.getMarketIdByTokenAddress(token).call(block_identifier=self.block)

    def get_market_interest_rate(self, market_id: int) -> tuple:
        return self.contract.functions.getMarketInterestRate(market_id).call(block_identifier=self.block)

    def get_market_interest_setter(self, market_id: int) -> str:
        return self.contract.functions.getMarketInterestSetter(market_id).call(block_identifier=self.block)

    def get_market_is_closing(self, market_id: int) -> bool:
        return self.contract.functions.getMarketIsClosing(market_id).call(block_identifier=self.block)

    def get_market_is_recyclable(self, market_id: int) -> bool:
        return self.contract.functions.getMarketIsRecyclable(market_id).call(block_identifier=self.block)

    def get_market_margin_premium(self, market_id: int) -> tuple:
        return self.contract.functions.getMarketMarginPremium(market_id).call(block_identifier=self.block)

    def get_market_max_wei(self, market_id: int) -> tuple:
        return self.contract.functions.getMarketMaxWei(market_id).call(block_identifier=self.block)

    def get_market_price(self, market_id: int) -> tuple:
        return self.contract.functions.getMarketPrice(market_id).call(block_identifier=self.block)

    def get_market_price_oracle(self, market_id: int) -> str:
        return self.contract.functions.getMarketPriceOracle(market_id).call(block_identifier=self.block)

    def get_market_spread_premium(self, market_id: int) -> tuple:
        return self.contract.functions.getMarketSpreadPremium(market_id).call(block_identifier=self.block)

    def get_market_token_address(self, market_id: int) -> str:
        return self.contract.functions.getMarketTokenAddress(market_id).call(block_identifier=self.block)

    def get_market_total_par(self, market_id: int) -> tuple:
        return self.contract.functions.getMarketTotalPar(market_id).call(block_identifier=self.block)

    def get_market_with_info(self, market_id: int) -> tuple[tuple, tuple, tuple, tuple]:
        return self.contract.functions.getMarketWithInfo(market_id).call(block_identifier=self.block)

    @property
    def get_min_borrowed_value(self) -> tuple:
        return self.contract.functions.getMinBorrowedValue().call(block_identifier=self.block)

    def get_num_excess_tokens(self, market_id: int) -> tuple:
        return self.contract.functions.getNumExcessTokens(market_id).call(block_identifier=self.block)

    @property
    def get_num_markets(self) -> int:
        return self.contract.functions.getNumMarkets().call(block_identifier=self.block)

    def get_recyclable_markets(self, n: int) -> list[int]:
        return self.contract.functions.getRecyclableMarkets(n).call(block_identifier=self.block)

    @property
    def get_risk_limits(self) -> tuple:
        return self.contract.functions.getRiskLimits().call(block_identifier=self.block)

    @property
    def get_risk_params(self) -> tuple:
        return self.contract.functions.getRiskParams().call(block_identifier=self.block)

    @property
    def is_owner(self) -> bool:
        return self.contract.functions.isOwner().call(block_identifier=self.block)

    @property
    def owner(self) -> str:
        return self.contract.functions.owner().call(block_identifier=self.block)
