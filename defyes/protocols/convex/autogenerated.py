"""
Autogenerated module. Don't change it manualy. Instead, import its classes into __init__.py or even derive them adding
extra methds.

# Inside __init__.py

from .autogenerated import StakedCvx

# Optionally
class StakedCvx(StakedCvx):
    ...
"""

from karpatkit.node import get_node
from web3 import Web3

from defyes.generator import load_abi


class StakedCvx:
    default_addresses: dict[str, str]

    def __init__(self, blockchain: str, block: int, address: str | None = None) -> None:
        self.block = block
        self.blockchain = blockchain
        if address:
            self.address = Web3.to_checksum_address(address)
        else:
            try:
                self.address = self.default_addresses[blockchain]
            except AttributeError as e:
                raise ValueError("No default_addresses defined when trying to guess the address.") from e
            except KeyError as e:
                raise ValueError(
                    f"{blockchain!r} not defined in default_addresses when trying to guess the address."
                ) from e
        node = get_node(blockchain)
        self.contract = node.eth.contract(address=self.address, abi=load_abi(__file__, "staked_cvx.json"))

    def allowance(self, owner: str, spender: str) -> int:
        return self.contract.functions.allowance(owner, spender).call(block_identifier=self.block)

    def balance_of(self, account: str) -> int:
        return self.contract.functions.balanceOf(account).call(block_identifier=self.block)

    @property
    def crv(self) -> str:
        return self.contract.functions.crv().call(block_identifier=self.block)

    @property
    def crv_depositor(self) -> str:
        return self.contract.functions.crvDepositor().call(block_identifier=self.block)

    @property
    def cvx(self) -> str:
        return self.contract.functions.cvx().call(block_identifier=self.block)

    @property
    def cvx_crv(self) -> str:
        return self.contract.functions.cvxCrv().call(block_identifier=self.block)

    @property
    def cvx_crv_staking(self) -> str:
        return self.contract.functions.cvxCrvStaking().call(block_identifier=self.block)

    @property
    def decimals(self) -> int:
        return self.contract.functions.decimals().call(block_identifier=self.block)

    @property
    def is_shutdown(self) -> bool:
        return self.contract.functions.isShutdown().call(block_identifier=self.block)

    @property
    def name(self) -> str:
        return self.contract.functions.name().call(block_identifier=self.block)

    @property
    def owner(self) -> str:
        return self.contract.functions.owner().call(block_identifier=self.block)

    def registered_rewards(self, arg0: str) -> int:
        return self.contract.functions.registeredRewards(arg0).call(block_identifier=self.block)

    @property
    def reward_hook(self) -> str:
        return self.contract.functions.rewardHook().call(block_identifier=self.block)

    @property
    def reward_length(self) -> int:
        return self.contract.functions.rewardLength().call(block_identifier=self.block)

    def reward_supply(self, _reward_group: int) -> int:
        return self.contract.functions.rewardSupply(_reward_group).call(block_identifier=self.block)

    def rewards(self, arg0: int) -> tuple[str, int, int, int]:
        """
        Output: reward_token, reward_group, reward_integral, reward_remaining
        """
        return self.contract.functions.rewards(arg0).call(block_identifier=self.block)

    @property
    def supply_weight(self) -> int:
        return self.contract.functions.supplyWeight().call(block_identifier=self.block)

    @property
    def symbol(self) -> str:
        return self.contract.functions.symbol().call(block_identifier=self.block)

    @property
    def three_crv(self) -> str:
        return self.contract.functions.threeCrv().call(block_identifier=self.block)

    @property
    def total_supply(self) -> int:
        return self.contract.functions.totalSupply().call(block_identifier=self.block)

    @property
    def treasury(self) -> str:
        return self.contract.functions.treasury().call(block_identifier=self.block)

    def user_reward_balance(self, _address: str, _reward_group: int) -> int:
        return self.contract.functions.userRewardBalance(_address, _reward_group).call(block_identifier=self.block)

    def user_reward_weight(self, arg0: str) -> int:
        return self.contract.functions.userRewardWeight(arg0).call(block_identifier=self.block)
