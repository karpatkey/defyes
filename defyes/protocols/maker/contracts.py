from defabipedia import Blockchain, Chain
from decimal import Decimal
from .autogenerated import CdpManager, DsrManager, IlkRegistry, Iou, McdSpot, Pot, ProxyRegistry, Sdai, Vat


class ProxyRegistry(ProxyRegistry):
    default_addresses: dict[str, str] = {
        Chain.ETHEREUM: "0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4",
    }


class CdpManager(CdpManager):
    default_addresses: dict[str, str] = {
        Chain.ETHEREUM: "0x5ef30b9986345249bc32d8928B7ee64DE9435E39",
    }

    def get_vault_ids(self, proxy_addr: str) -> list[int]:
        ids = []
        n_id = self.first(proxy_addr)
        for nvault in range(self.count(proxy_addr)):
            ids.append(n_id)
            n_id = self._list(n_id)[1]
        return ids


class IlkRegistry(IlkRegistry):
    default_addresses: dict[str, str] = {
        Chain.ETHEREUM: "0x5a464C28D19848f44199D003BeF5ecc87d090F87",
    }


class Vat(Vat):
    default_addresses: dict[str, str] = {
        Chain.ETHEREUM: "0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B",
    }

    def ilks(self, arg0: bytes) -> tuple[int, int, int, int, int]:
        """
        Output: Art, rate, spot, line, dust
        """
        art, rate, spot, line, dust = self.contract.functions.ilks(arg0).call(block_identifier=self.block)
        return art, Decimal(rate).scaleb(-27), spot, line, dust


class McdSpot(McdSpot):
    default_addresses: dict[str, str] = {
        Chain.ETHEREUM: "0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3",
    }


class Pot(Pot):
    default_addresses: dict[str, str] = {
        Chain.ETHEREUM: "0x197E90f9FAD81970bA7976f33CbD77088E5D7cf7",
    }

    @property
    def chi(self):
        ts = self.contract.w3.eth.get_block(self.block)["timestamp"]
        if ts > self.rho:
            chi = self.drip
        else:
            chi = self.chi
        return chi

    def decimal_pie_1(self, wallet: str) -> Decimal:
        return Decimal(self.pie_1(wallet)).scaleb(-27)


############################################################
class DsrManager(DsrManager):
    default_addresses: dict[str, str] = {
        Chain.ETHEREUM: "0x373238337Bfe1146fb49989fc222523f83081dDb",
    }

    def decimal_pie_of(self, wallet: str) -> Decimal:
        return Decimal(self.pie_of(wallet)).scaleb(-27)


#class DsrManagerDeployment(DeploymentCrypto):
#    abi_class = abis.DsrManager
#    chain = Chain.ETHEREUM
#    address = "0x373238337Bfe1146fb49989fc222523f83081dDb"
#
#    def pie_of(self, wallet: str, block: int) -> Decimal:
#        self.abi.block = block  # TODO: improve this workarround
#        return Decimal(self.abi.pie_of(wallet)).scaleb(-27)


############################################################


class Sdai(Sdai):
    default_addresses: dict[str, str] = {
        Chain.ETHEREUM: "0x83F20F44975D03b1b09e64809B757c47f942BEeA",
        Chain.GNOSIS: "0xaf204776c7245bF4147c2612BF6e5972Ee483701",
    }


# class tokens:
#    class ethereum:
#        class ERC20Token(ERC20Token):
#            chain = Chain.ETHEREUM
#
#        MKR = ERC20Token(address=EthereumTokenAddr.MKR)
#        DAI = ERC20Token(address=EthereumTokenAddr.DAI)
#        sDAI = ERC20Token(abi_class=Sdai, unwrapped=DAI)
#
#    class gnosis:
#        #xDAI = NativeToken(chain=Chain.GNOSIS, symbol="xDAI")
#        xDAI = NativeToken.instances.get(chain=Chain.GNOSIS)
#        sDAI = ERC20Token(chain=Chain.GNOSIS, unwrapped=xDAI)


############################################################
class Iou(Iou):
    default_addresses: dict[str, str] = {
        Chain.ETHEREUM: "0xA618E54de493ec29432EbD2CA7f14eFbF6Ac17F7",
    }
