"""
Autogenerated module. Don't change it manualy. Instead, import its classes into __init__.py or even derive them adding
extra methds.

# Inside __init__.py

from .autogenerated import OsTokenVaultController

# Optionally
class OsTokenVaultController(OsTokenVaultController):
    ...
"""

from karpatkit.node import get_node
from web3 import Web3

from defyes.generator import load_abi


class OsTokenVaultController:
    default_addresses: dict[str, str]

    def __init__(self, blockchain: str, block: int, address: str | None = None) -> None:
        self.block = block
        self.blockchain = blockchain
        if address:
            self.address = Web3.to_checksum_address(address)
        else:
            try:
                self.address = self.default_addresses[blockchain]
            except AttributeError as e:
                raise ValueError("No default_addresses defined when trying to guess the address.") from e
            except KeyError as e:
                raise ValueError(
                    f"{blockchain!r} not defined in default_addresses when trying to guess the address."
                ) from e
        node = get_node(blockchain)
        self.contract = node.eth.contract(
            address=self.address, abi=load_abi(__file__, "os_token_vault_controller.json")
        )

    @property
    def avg_reward_per_second(self) -> int:
        return self.contract.functions.avgRewardPerSecond().call(block_identifier=self.block)

    @property
    def capacity(self) -> int:
        return self.contract.functions.capacity().call(block_identifier=self.block)

    def convert_to_assets(self, shares: int) -> int:
        """
        Output: assets
        """
        return self.contract.functions.convertToAssets(shares).call(block_identifier=self.block)

    def convert_to_shares(self, assets: int) -> int:
        """
        Output: shares
        """
        return self.contract.functions.convertToShares(assets).call(block_identifier=self.block)

    @property
    def cumulative_fee_per_share(self) -> int:
        return self.contract.functions.cumulativeFeePerShare().call(block_identifier=self.block)

    @property
    def fee_percent(self) -> int:
        return self.contract.functions.feePercent().call(block_identifier=self.block)

    @property
    def keeper(self) -> str:
        return self.contract.functions.keeper().call(block_identifier=self.block)

    @property
    def owner(self) -> str:
        return self.contract.functions.owner().call(block_identifier=self.block)

    @property
    def pending_owner(self) -> str:
        return self.contract.functions.pendingOwner().call(block_identifier=self.block)

    @property
    def total_assets(self) -> int:
        return self.contract.functions.totalAssets().call(block_identifier=self.block)

    @property
    def total_shares(self) -> int:
        return self.contract.functions.totalShares().call(block_identifier=self.block)

    @property
    def treasury(self) -> str:
        return self.contract.functions.treasury().call(block_identifier=self.block)
