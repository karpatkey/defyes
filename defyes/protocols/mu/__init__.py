"""This module contains the functions to interact with the mu protocol.
The main function is `get_protocol_data_for` that returns the data for a wallet for mu exchange.
for more info on the mu exchange protocol, see https://docs.mu.exchange/staking/usdmsdai-vault.
"""

from web3 import Web3

from defyes.functions import ensure_a_block_number
from defyes.protocols.mu.autogenerated import TradingVault
from defyes.types import Addr, Token, TokenAmount


def get_protocol_data_for(
    blockchain: str,
    wallet: str,
    position_identifier: str,
    block: int | str = "latest",
    decimals: bool = True,
) -> dict:
    """Get the data for a wallet for mu exchange. Currently there's just one vault that is supported.
    msDAI.

    Args:
        position_identifier (str): The address of the vault to get the data from. e.g. msDAI vault.
    """
    wallet = Addr(Web3.to_checksum_address(wallet))
    position_identifier = Web3.to_checksum_address(position_identifier)
    block = ensure_a_block_number(block, blockchain)

    # Get the trading vault with the msDAI balance info
    tv = TradingVault(blockchain, block, position_identifier)

    # Get the amount of the holdings we have
    holdings_amount = TokenAmount.from_teu(tv.balance_of(wallet), Token(position_identifier, blockchain))

    # Calculate amount of sDAI in the pool and reduce to the elementary token DAI
    sdai_amount_in_pool = get_sdai_amount(int(holdings_amount.balance()), tv.total_supply, tv.current_balance)

    address = tv.standard_token
    amount = TokenAmount.from_teu(sdai_amount_in_pool, Token(address, blockchain)).balance(decimals)

    position_data = [{"address": position_identifier, "balance": holdings_amount.balance(decimals)}]
    underlying_data = [{"address": address, "balance": amount}]

    data = {
        "blockchain": blockchain,
        "block": block,
        "protocol": "Mu Exchange",
        "positions_key": "holding_token_address",
        "version": 0,
        "wallet": wallet,
        "decimals": tv.decimals,
        "positions": {
            position_identifier: {
                "holdings": position_data,
                "underlyings": underlying_data,
            }
        },
    }

    return data


def get_sdai_amount(shares, total_supply, current_balance):
    """Function to calculate the amount of sDAI in the pool.
    This function is based on the function withdraw of the trading vault contract.

    `Contract Example <https://gnosisscan.io/address/0x0d80D7f7719407523A09ee2ef7eD573e0eA3487a#code#F12#L109>`_
    """
    user_asset = (current_balance * shares) // total_supply

    return user_asset
