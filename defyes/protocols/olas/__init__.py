from defabipedia import Chain
from web3 import Web3

from defyes.functions import ensure_a_block_number, get_decimals
from defyes.protocols.olas.autogenerated import Veolas

Veolas.default_addresses = {Chain.ETHEREUM: "0x7e01A500805f8A52Fad229b3015AD130A332B7b3"}


def get_protocol_data_for(blockchain: str, wallet: str, block: int, decimals: bool = True) -> dict:
    """Get the amount of veOLAS for a wallet."""
    wallet = Web3.to_checksum_address(wallet)
    block = ensure_a_block_number(block, blockchain)

    try:
        veOLAS = Veolas(blockchain, block)
    except ValueError as e:
        if str(e) == f"'{blockchain}' not defined in default_addresses when trying to guess the address.":
            raise ValueError(f"Blockchain {blockchain} not supported")

    veOLAS_amount = veOLAS.balance_of(wallet)

    d = get_decimals(veOLAS.address, blockchain)

    if decimals:
        veOLAS_amount = veOLAS_amount / 10**d

    data_dict = {
        "blockchain": blockchain,
        "block": block,
        "protocol": "Olas",
        "positions_key": None,
        "version": 0,
        "wallet": wallet,
        "decimals": "",
        "positions": {
            "veOLAS": {
                "holdings": [{"address": veOLAS.address, "balance": veOLAS_amount}],
                "underlyings": [{"address": veOLAS.token, "balance": veOLAS_amount}],
            },
        },
    }

    return data_dict
