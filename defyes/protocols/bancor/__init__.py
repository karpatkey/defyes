import logging
from decimal import Decimal

from defabipedia import Chain
from karpatkit.helpers import listify
from web3 import Web3

from defyes.functions import to_token_amount

from .autogenerated import BancorPool, BancorNetwork, BancorNetworkInfo


logger = logging.getLogger(__name__)


class BancorPool(BancorPool):
    default_addresses: dict[str, str] = {
        Chain.ETHEREUM: "0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C",
    }


class BancorNetworkInfo(BancorNetworkInfo):
    default_addresses: dict[str, str] = {
        Chain.ETHEREUM: "0x8E303D296851B320e6a697bAcB979d13c9D6E760",
    }

    def get_liquidity_pool_balance(self, pool_address: str, wallet: str, reward: bool = True) -> list[list[str, Decimal]]:
        """
        Fetches the balance of the pool token and the reward token.
        :param pool_address: The address of the liquidity pool.
        :param wallet: The address of the wallet.
        :param reward: If True, returns the balance of the reward token.
        :return: the token address and the balance.
        """

        balances = []
        bancor_pool = BancorPool(self.blockchain, self.block, pool_address)
        balance = bancor_pool.balance_of(wallet)

        if balance != 0:
            reserve_token = bancor_pool.reserve_token
            bancor_pool = self.withdrawal_amounts(reserve_token, balance)

            balances.append([reserve_token, to_token_amount(reserve_token, bancor_pool[1], self.blockchain, None, True)])
            if reward:
                balances.append([self.bnt, to_token_amount(self.bnt, bancor_pool[2], self.blockchain, None, True)])
        return balances


class BancorNetwork(BancorNetwork):
    default_addresses: dict[str, str] = {
        Chain.ETHEREUM: "0xeEF417e1D5CC832e619ae18D2F140De2999dD4fB",
    }

    def __init__(self, blockchain: str, block: int, address: str | None = None):
        super().__init__(blockchain, block, address)
        self.__network_info: BancorNetworkInfo | None = None

    @property
    def network_info(self) -> BancorNetworkInfo:
        if self.__network_info:
            return self.__network_info
        else:
            self.__network_info = BancorNetworkInfo(self.blockchain, self.block)
        return self.__network_info
    
    @network_info.setter
    def network_info(self, network_info: BancorNetworkInfo):
        self.__network_info = network_info
    
    @listify
    def get_all_liquidity_pools_addr(self) -> list[str]:
        """
        Returns all liquidity pools' token address.
        """
        for pool in self.liquidity_pools:
            yield self.network_info.pool_token(pool)

    @listify
    def get_all_liquidity_pools_balance(self, wallet: str, reward: bool = True) -> list[list[str, Decimal]]:
        """
        Returns all liquidity pools tokens from network.
        """
        for pool_address in self.get_all_liquidity_pools_addr():
            yield self.network_info.get_liquidity_pool_balance(pool_address, wallet, reward)


def get_protocol_data_for(
    token: str, wallet: str, blockchain: str, block: int | str = "latest", reward: bool = True
):
    """
    Fetches the balance of a given pool token.
    """
    wallet = Web3.to_checksum_address(wallet)

    bancor_network_info = BancorNetworkInfo(blockchain, block)
    balances = bancor_network_info.get_liquidity_pool_balance(token, wallet, reward)

    return balances
    

def get_protocol_data(
    blockchain: str, wallet: str, block: int | str = "latest", reward: bool = False
) -> dict:
    """
    Fetches the balance of all the liquidity pools.
    """
    wallet = Web3.to_checksum_address(wallet)

    bancor_network = BancorNetwork(blockchain, block)
    balances = bancor_network.get_all_liquidity_pools_balance(wallet)

    return {
        "protocol": "Bancor",
        "blockchain": blockchain,
        "wallet": wallet,
        "block_id": block,
        "positions_key": "",
        "positions": balances,
        "version": 0,
    }